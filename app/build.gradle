apply plugin: 'com.android.application'

def keystorePropertiesFile = rootProject.file("../keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId rootProject.ext.applicationID
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet false
        // if true, stop the gradle build if errors are found
        abortOnError true
        // if true, only report errors
        ignoreWarnings true
    }

    signingConfigs {
        release {
            def storePass = System.getenv('keystoreusername')
            def password = System.getenv('keystorepassword')
            def aliasName = System.getenv('keyalias')
            def keyStorePath = System.getenv('keystorepath')

            storeFile file("${keyStorePath}")
            keyAlias "${aliasName}"
            keyPassword "${password}"
            storePassword "${storePass}"
        }

        devrelease {

            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
           // buildConfigField("String", "BASE_URL", "\"http://www.mocky.io/v2\"")
           // buildConfigField("String", "API_KEY", "\"ABCXYZ123TEST\"")
           // resValue "string", "google_maps_api_key", "AIzaSyBQucltx5i10fqfxaFQNpRb6igGsnmdk0Q"
            // Disable fabric build ID generation for debug builds
            ext.enableCrashlytics = false
        }
        release {
           /* def googleapikey = System.getenv('googleapikey')
            resValue "string", "google_maps_api_key", "${googleapikey}"*/
           // buildConfigField("String", "BASE_URL", "\"http://www.mocky.io/v2\"")
            //buildConfigField("String", "API_KEY", "\"ABCXYZ123TEST\"")
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        devrelease {
           // resValue "string", "google_maps_api_key", keystoreProperties['mapKey']
            //buildConfigField("String", "BASE_URL", "\"http://www.mocky.io/v2\"")
            //buildConfigField("String", "API_KEY", "\"ABCXYZ123TEST\"")
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.devrelease
            zipAlignEnabled true
        }
    }

    dexOptions {
        preDexLibraries = false
        jumboMode = true
        javaMaxHeapSize "4g"
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    sourceSets {
        main {
            aidl.srcDirs = ['src/main/java']
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
        }
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // android support libraries
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.android.support:percent:$rootProject.ext.supportLibraryVersion"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.ext.constraintVersion"
   // implementation "com.android.support:support-vector-drawable:$rootProject.supportLibraryVersion"
   // implementation "com.android.support:animated-vector-drawable:$rootProject.supportLibraryVersion"

    // font
   // implementation "uk.co.chrisjenx:calligraphy:$rootProject.calligraphyVersion"

    // network
    implementation "com.amitshekhar.android:rx2-android-networking:$rootProject.rx2FastAndroidNetworking"

    // image
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"

    // parser
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"

    // database
   // implementation "org.greenrobot:greendao:$rootProject.greenDaoVersion"

    // debug database
   // debugImplementation "com.amitshekhar.android:debug-db:$rootProject.debugDBVersion"

    // dependency injection
    implementation "com.google.dagger:dagger:$rootProject.dagger2Version"
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.dagger2Version"
    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'javax.inject:javax.inject:1'

    // reactive
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxjava2Version"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxandroidVersion"

    // code generator for view
    implementation "com.jakewharton:butterknife:$rootProject.butterKnifeVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterKnifeVersion"

    // swipe view
   // implementation "com.mindorks:placeholderview:$rootProject.placeholderviewVersion"

    // logger
    implementation "com.jakewharton.timber:timber:$rootProject.timberVersion"

    //multidex
    implementation "com.android.support:multidex:$rootProject.ext.multidex"

    implementation 'com.android.support:support-annotations:27.1.1'
    compile 'com.android.support:support-annotations:+'

    //implementation "org.jsoup:jsoup:1.9.2"

    // dependencies for local unit tests
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testAnnotationProcessor "com.google.dagger:dagger-compiler:$rootProject.dagger2Version"

    // UI Testing
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$rootProject.espressoVersion"
    androidTestImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    androidTestAnnotationProcessor "com.google.dagger:dagger-compiler:$rootProject.dagger2Version"

}

configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$supportLibraryVersion"
}

